package com.design;

import com.design.creational.builder.UserBuilder;
import com.design.creational.factory.Car;
import com.design.creational.factory.CarFactory;
import com.design.creational.factory.CarType;
import com.design.creational.prototype.Models.Movie;
import com.design.creational.prototype.PrototypeCapable;
import com.design.creational.prototype.PrototypeFactory;
import com.design.creational.prototype.PrototypeFactory.ModelType;

public class Main {
	
	
	
 public static void main(String[] args) {
	
	 
	
	/* ######### Builder Design Pattern ########## */
	User ub = new UserBuilder("pawan","sankhle")
	.email("pawan@gmail.com")
	.id(1).build();
	
	
	
	/* ######### prototype Design Pattern ########## */
	PrototypeFactory factory = new PrototypeFactory();
	try {
		PrototypeCapable movie = factory.getInstance(ModelType.MOVIE);
		Movie m = (Movie) movie;
		m.setName("akber");
		System.err.println("movie => " + m);
	} catch (CloneNotSupportedException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	
	/* ##########Factory Design Pattern############# */
	Car small = CarFactory.buildCar(CarType.SMALL);
	Car sedan = CarFactory.buildCar(CarType.SEDAN);
	Car luxury = CarFactory.buildCar(CarType.LUXURY);
	
	// System.out.println(small + " " + sedan + " " + luxury);
	
	/* ########## Abstract Factory Design Pattern############# */
	
	com.design.creational.abstractfactory.Car small1 = com.design.creational.abstractfactory.CarFactory.buildCar(CarType.SMALL);
	
	
	
	private static Lis<Integer&> list = new ArrayList&lt;&gt;();
    private static long startTime;
    private static long endTime;
    static
    {
        for(int i=0; i &lt; 1_00_00_000; i++)
        {
            list.add(i);
        }
    }
 }
}
