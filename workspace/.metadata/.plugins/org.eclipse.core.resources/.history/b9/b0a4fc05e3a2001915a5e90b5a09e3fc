package com.design;

import com.design.creational.builder.User;
import com.design.creational.builder.UserBuilder;
import com.design.creational.factory.Car;
import com.design.creational.factory.CarFactory;
import com.design.creational.factory.CarType;
import com.design.creational.prototype.Models.Movie;
import com.design.creational.prototype.PrototypeCapable;
import com.design.creational.prototype.PrototypeFactory;
import com.design.creational.prototype.PrototypeFactory.ModelType;
final interface A{
	
}
public class Main {
	
	
	String a = "pawan";
	String b = "napwan";
	 System.err.println( a.charAt(0) > b.chatAt(0) );
	private String name;
	
	private static String result = "";
	public static String reverse(String s) {
		if(s != null && !s.isEmpty()) {
			
			result += s.charAt(s.length() -1);
		}
		if(s.length() == 1) {
			return result;
		}else {
			return reverse(s.substring(0,s.length() -1));
		}
	}
	
 public static void main(String[] args) {
	
	 
	
		           Object myObj = new String[]{"one", "two", "three"};
		            {
		          for(String s : (String[])myObj) 
		          System.out.print(s + ".");
		     }
		 
	 System.err.println(reverse("pawansankhle"));
	 
	
	/* ######### Builder Design Pattern ########## */
	 
	User ub = new UserBuilder("pawan","sankhle")
	.email("pawan@gmail.com")
	.id(1).build();
	
	
	
	/* ######### prototype Design Pattern ########## */
	PrototypeFactory factory = new PrototypeFactory();
	try {
		PrototypeCapable movie = factory.getInstance(ModelType.MOVIE);
		Movie m = (Movie) movie;
		m.setName("akber");
		System.err.println("movie => " + m);
	} catch (CloneNotSupportedException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	
	/* ##########Factory Design Pattern############# */
	Car small = CarFactory.buildCar(CarType.SMALL);
	Car sedan = CarFactory.buildCar(CarType.SEDAN);
	Car luxury = CarFactory.buildCar(CarType.LUXURY);
	
	// System.out.println(small + " " + sedan + " " + luxury);
	
	/* ########## Abstract Factory Design Pattern############# */
	
	com.design.creational.abstractfactory.Car small1 = com.design.creational.abstractfactory.CarFactory.buildCar(CarType.SMALL);
	
	
 }
}
